version: '3.8'

services:
  factoryflow-hr:
    build:
      context: .
      dockerfile: Dockerfile
    image: factoryflow-hr:latest
    container_name: factoryflow-hr
    restart: unless-stopped

    ports:
      - "9002:9002"

    environment:
      - NODE_ENV=production
      - PORT=9002
      - GEMINI_API_KEY=${GEMINI_API_KEY}

    env_file:
      - .env

    volumes:
      # Persistir datos de la aplicación
      - app-data:/app/data
      # Logs persistentes
      - ./logs:/app/logs

    networks:
      - factoryflow-network

    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:9002', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    labels:
      com.centurylinklabs.watchtower.enable: "true"
      description: "FactoryFlow HR - Sistema de gestión de RRHH para fábricas"

  # Opcional: Base de datos PostgreSQL (para futuras migraciones)
  # postgres:
  #   image: postgres:16-alpine
  #   container_name: factoryflow-db
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_USER: ${DB_USER:-factoryflow}
  #     POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
  #     POSTGRES_DB: ${DB_NAME:-factoryflow_hr}
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - factoryflow-network
  #   ports:
  #     - "5432:5432"

  # Opcional: Redis para caché (optimización)
  # redis:
  #   image: redis:7-alpine
  #   container_name: factoryflow-cache
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - factoryflow-network
  #   ports:
  #     - "6379:6379"

networks:
  factoryflow-network:
    driver: bridge

volumes:
  app-data:
    driver: local
  # postgres-data:
  #   driver: local
  # redis-data:
  #   driver: local
